# NEXUS ARTIFACT REPOSITORY MANAGER

Artifact repositories is where you store artifacrs of different format eg TAR, JAR, WAR, ZIP, etc. Nexus have both open source and commercial version.

In this project, I will be setting-up Nexus as an artifact repository manager in a cloud server (but I would be using ubuntu wsl).


You can host your own privately owned repository on nexus and you can also set a proxy to public reposirories like maven and npm repositories

Nexux have a powerful and flexible rest API integration with it tools, to reduce manual processes.

#STEPS

1. Install java-version 8. That is what Nexux needs to eun.
=> sudo apt-get install openjdk-8-jdk

2. Install Nexux on our server in the /opt directory as root user
=> wget https://download.sonatype.com/nexus/3/latest-unix.tar.gz
=> tar -zxvf latest-unix.tar.gz

** Nexux Folder = Contains runtime and application for Nexus
** Sonartype-work = Contains my own config for Nexus and data eg dependencies, IPs accessing Nexus, logs, uploaded files and metadata, ...

3. Create a Nexus user and use it to start the service
=> add user naxus

4. change nexus files owner to be for nexus
=> chown -R nexus:nexus nexus-3.28.1-01
=> chown -R nexus:nexus sonatype-work

5. Setup nexus configuration so it can run as the nexus-user, by editing the file in the nexus folder
=> vim nexus-3.28.1-01/bin/nexus.rc
##edit to becomee ##
run_as_user="nexus"

6. Switch user to nexus to run the service
=> su - nexus

7. Start the nexus service
=> /opt/nexus-3.70.1-02/bin/nexus start

8. To confirm that it is running.
=> ps aux | grep nexus     # This shows the process ID
or
=> netstat -lnpt           # This shows the internet port (8081)

9. Run the Nexus UI on your browser
<private IP>:8081
######### ref= image 1 and 2

10. Nexus UI NOTES
i. An Admin user is automatically created with 
username: Admin
password: <embedded in the admin.password file inside the sonatppe folder>
NB: This would be changed on your first login.
######## ref= image 3

ii. You could create sub users to interact with the nexus platform also.

iii. REPOSITORY TYPES
######## ref= image 4
- Proxy Repository: This is a repository that is a link to another repository and it heps with caching of artifacts eg maven-central and nuget.org repositories

- Hosted Reposirory: They serve as the primary storage for artifacts and components for the company owned. More like private resources. eg maven-releases, maven-snapshots, nuget-hosted, etc... or for 3rd parties components that are not externally available. But can be referenced from commercial repositories. Hence serves like a private proxy.

- Group Repository: This is used to combine multiple individual repositories serving different purposes to be behind a single grouped endpoint. eg maven-public, nuget-group, etc

11. Creating Nexus User with Priviledge
i. Create a nexus user to grant it permission to artifacts on the nexus UI (## ref= image 5)
ii. Create a role in Nexus for the user to access Java based Artifact. (Note: Use the view priviledge type) (## ref= image 6 and 7)
iii. Assign the newly created role to the newly created user as the only attached role. To maintain the principle of least priviledge.

12. Configure a Java Project (Gradle) with Nexus 
i. In the build.gradle file, add the apply plugin, publishing and repository blocks.

####### my added block for building my artifact and publishing to Nexus Artifact Repository ####

apply plugin: "maven-publish"

publishing {
    publications {
        maven(MavenPublication) {
            artifact("build/libs/artifact-practice-gradle-app-$version" + ".jar") {
                extension 'jar'
            }
        }
    }

    repositories {
        maven {
            name "nexus"
            url "http://172.22.159.46:8081/repository/maven-snapshots/"
            allowInsecureProtocol true
            credentials {
                username project.repoUser
                password project.repoPassword
            }
        }
    }
}
########################################

ii. Then we create the gradle.properties file. where we define the username and password. and reference it in the build.gradle file.

repoUser = samuelcj
repoPassword = XXXXXX

iii. Now we can run the build command in the terminal
=> ./grawdlew build

iv. We can now publish the jarfile (the artifact in the build/lil/ directory. using the command.
=> ./gradlew publish          ######## ref= image 8 & 9


12. Configure a Java Maven Project with Nexus

i. Replace the build block of code to represent the plugin block of code to the porm.xml file, so that maven can build and push to nexus.

####### my added block for building my artifact and publishing to Nexus Artifact Repository ####
    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-deploy-plugin</artifactId>
                    <version>2.8.2</version>
                </plugin>
            </plugins>
        </pluginManagement>

        </plugins>
             <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-deploy-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

    <distributionManagement>
        <snapshotRepository>
            <id>nexus-snapshot</id>
            <url>http://172.22.159.46:8081/reposirory/maven-snapshots/</url>
        </snapshotRepository>
    </distributionManagement>
###################################
#################################
NB: Remember to refresh the project to sync the new plugin into the project.

ii. Set up how maven will locate the Nexus repository usinf the distribution management part of the above code blocks

iii. Configure credentials so Maven can authenticate with it using the nexus user. This is setup in the ".m2 folder" in the home directory (~).
The credential file will be used by all maven project and it is called: "settings.xml". The content is shown below: 

<settings>
    <servers>
        <server>
            <id>nexus-snapshot</id>
            <username>samuelcj</username>
            <password>XXXXXXX</password>
        </server>
    </servers>
</settings>

iii. Next is to build and push the artifact to nexus from the command line. Using the following commands

- mvn package		######## ref= image 10a & b
- mvn deploy		######## refs= image 11a & b 

